package managers;

import servlets.TaskException;

import java.io.*;

/**
 * Created with IntelliJ IDEA.
 * User: Алина
 * Describes task object, which have own location, id, status
 */
public class Task {
  private String taskID;
  private String taskLocation;

  /**
   * Status types, what task can have
   */
  public static enum TaskStatus {NOT_SET, NOT_READY, READY};
  TaskStatus status;

  public enum TaskType {NON, BUILD, RUN, BUILD_RUN};
  private TaskType OPERATION = TaskType.NON;

  private String LANGUAGE_TYPE = "";
  private String COMPILE_PARAMETERS = "";
  private String INPUT_DATA = "";
  private String ENTRY_POINT_PATH = "";
  private String COMPILATOR = "";

  /**
   * Creates Task object by id
   *
   * @param taskID - task ID, generated by IDGenerator
   * @throws TaskException
   */
  public Task(String taskID) throws TaskException {
    this.taskID = taskID;
    this.taskLocation = ConfigManager.getTaskLocationByID(taskID);
  }

  /**
   * Creates new Task object by id generated IDGenerator & task name
   *
   * @param taskID   - new task ID, generated by IDGenerator
   * @param taskName - project name
   * @throws TaskException
   */
  public Task(String taskID, String taskName) throws TaskException {
    this.taskID = taskID;
    this.taskLocation = ConfigManager.getTaskLocationByID(taskID);

    (new File(taskLocation)).mkdir();
    setTaskName(taskName);
  }

  // task status

  /**
   * Sets task status
   *
   * @param status - task status
   * @throws TaskException
   */
  public void setTaskStatus(TaskStatus status) throws TaskException {
    this.status = status;
  }

  /**
   * Writes task status to data base
   *
   * @throws TaskException
   */
  private void setTaskStatusToFile() throws TaskException {
    FileWriter taskStatusFile = null;
    try {
      taskStatusFile = new FileWriter(ConfigManager.getTaskStatusFileLocationByID(taskID));
      taskStatusFile.write(status.toString());
      taskStatusFile.close();

    } catch (IOException e) {
      throw new TaskException("Task status setting failed.");
    }
  }

  private TaskStatus getTaskStatusByString(String status) throws TaskException {
    if (status.equals("0")) return TaskStatus.NOT_SET;
    if (status.equals("1")) return TaskStatus.NOT_READY;
    if (status.equals("2")) return TaskStatus.READY;
    throw new TaskException("Invalid task status value.");
  }

  /**
   * Gets current task status
   *
   * @return current  task status
   * @throws TaskException
   */
  public TaskStatus getTaskStatus() throws TaskException {
    this.status = getTaskStatusFromFile();
    return status;
  }

  /**
   * Reads current task status from data base
   *
   * @return current  task status
   * @throws TaskException
   */
  private TaskStatus getTaskStatusFromFile() throws TaskException {
    BufferedReader taskStatusFile = null;
    String taskStatus = "";
    try {
      taskStatusFile = new BufferedReader(new FileReader(ConfigManager.getTaskStatusFileLocationByID(taskID)));
      taskStatus = taskStatusFile.readLine();
      taskStatusFile.close();

    } catch (FileNotFoundException e) {
      throw new TaskException("Task status reading failed.");

    } catch (IOException e) {
      throw new TaskException("Task status reading failed.");
    }

    return getTaskStatusByString(taskStatus);
  }

  // task input data

  public void setTaskInputData(String LANGUAGE_TYPE, String OPERATION, String COMPILE_PARAMETERS,
                               String INPUT_DATA, String ENTRY_POINT_PATH, String COMPILATOR) {
    this.LANGUAGE_TYPE = getTaskDataByValue(LANGUAGE_TYPE);
    this.OPERATION = getOperationByString(OPERATION);
    this.COMPILE_PARAMETERS = getTaskDataByValue(COMPILE_PARAMETERS);
    this.INPUT_DATA = getTaskDataByValue(INPUT_DATA);
    this.ENTRY_POINT_PATH = getTaskDataByValue(ENTRY_POINT_PATH);
    this.COMPILATOR = getTaskDataByValue(COMPILATOR);
  }

  /**
   * Sets input data for task
   *
   * @throws TaskException
   */
  private void setTaskInputDataToFile() throws TaskException {
    FileWriter taskDataFile = null;
    try {
      taskDataFile = new FileWriter(ConfigManager.getTaskInputDataFileLocationByID(taskID));
      taskDataFile.write(LANGUAGE_TYPE + '\n');
      taskDataFile.write(OPERATION.toString() + '\n');
      taskDataFile.write(COMPILE_PARAMETERS + '\n');
      taskDataFile.write(INPUT_DATA + '\n');
      taskDataFile.write(ENTRY_POINT_PATH + '\n');
      taskDataFile.write(COMPILATOR + '\n');

      taskDataFile.close();

    } catch (IOException e) {
      throw new TaskException("Task input data saving failed.");
    }
  }

  private TaskType getOperationByString(String operation) {
    if(operation == null){
      return TaskType.NON;
    }
    if (operation.equals(TaskType.BUILD.toString())) {
      return TaskType.BUILD;
    }
    if (operation.equals(TaskType.RUN.toString())) {
      return TaskType.RUN;
    }
    return TaskType.NON;
  }

  private String getTaskDataByValue(String data) {
    if (data == null) {
      return "-";
    }
    return data;
  }

  private TaskType getOperationFromFile() throws TaskException{
    BufferedReader taskInputDataFile = null;
    String type = "";
    try {
      taskInputDataFile = new BufferedReader(new FileReader(ConfigManager.getTaskInputDataFileLocationByID(taskID)));
      taskInputDataFile.readLine();
      type = taskInputDataFile.readLine();
      taskInputDataFile.close();

    } catch (FileNotFoundException e) {
      throw new TaskException("Task status reading failed.");

    } catch (IOException e) {
      throw new TaskException("Task status reading failed.");
    }

    return getOperationByString(type);
  }

  public String getLANGUAGE_TYPE() {
    return LANGUAGE_TYPE;
  }

  public TaskType getOPERATION() {
    return OPERATION;
  }

  public String getCOMPILE_PARAMETERS() {
    return COMPILE_PARAMETERS;
  }

  public String getINPUT_DATA() {
    return INPUT_DATA;
  }

  public String getENTRY_POINT_PATH() {
    return ENTRY_POINT_PATH;
  }

  public String getCOMPILATOR() {
    return COMPILATOR;
  }

  public void setLANGUAGE_TYPE(String LANGUAGE_TYPE) {
    this.LANGUAGE_TYPE = LANGUAGE_TYPE;
  }

  public void setOPERATION(TaskType OPERATION) {
    this.OPERATION = OPERATION;
  }

  public void setCOMPILE_PARAMETERS(String COMPILE_PARAMETERS) {
    this.COMPILE_PARAMETERS = COMPILE_PARAMETERS;
  }

  public void setINPUT_DATA(String INPUT_DATA) {
    this.INPUT_DATA = INPUT_DATA;
  }

  public void setENTRY_POINT_PATH(String ENTRY_POINT_PATH) {
    this.ENTRY_POINT_PATH = ENTRY_POINT_PATH;
  }

  public void setCOMPILATOR(String COMPILATOR) {
    this.COMPILATOR = COMPILATOR;
  }


  // task project

  /**
   * Sets project file for current task
   *
   * @param in          - project file
   * @param outLocation - location, where project file will be set
   * @throws FileNotFoundException
   * @throws IOException
   */
  private void setFile(InputStream in, String outLocation) throws FileNotFoundException, IOException {
    FileOutputStream uploadedFile = null;

    uploadedFile = new FileOutputStream(new File(outLocation));
    int read = 0;
    byte[] bytes = new byte[1024];

    while ((read = in.read(bytes)) != -1) {
      uploadedFile.write(bytes, 0, read);
    }

    uploadedFile.flush();
    uploadedFile.close();
  }

  private void setTaskName(String taskName) throws TaskException {
    FileWriter taskNameFile = null;
    try {
      taskNameFile = new FileWriter(ConfigManager.getTaskNameFileLocationByID(taskID));
      taskNameFile.write(taskName);
      taskNameFile.close();

    } catch (IOException e) {
      throw new TaskException("Task name setting failed.");
    }
  }

  public String getTaskProjectName() throws TaskException {
    String projectNameLocation = ConfigManager.getTaskNameFileLocationByID(taskID);

    BufferedReader taskProjectNameFile = null;
    String projectName = "";
    try {
      taskProjectNameFile = new BufferedReader(new FileReader(ConfigManager.getTaskNameFileLocationByID(taskID)));
      projectName = taskProjectNameFile.readLine();
      taskProjectNameFile.close();

    } catch (FileNotFoundException e) {
      throw new TaskException("Task project name reading failed.");

    } catch (IOException e) {
      throw new TaskException("Task project name reading failed.");
    }

    return projectName;
  }

  /**
   * Sets project zip file for task
   *
   * @param inputStream - project zip file
   * @param zipFileName - zip file name
   * @throws TaskException
   */
  public void setZip(InputStream inputStream, String zipFileName) throws TaskException {
    String zipFileLocation = taskLocation + "\\" + zipFileName;
    try {
      setFile(inputStream, zipFileLocation);
      ZipManager.unzipFile(zipFileLocation);


    } catch (IOException e) {
      throw new TaskException("Zip file for Task ID=" + taskID + " saving failed.");
    }
  }

  /**
   * Gets task result
   *
   * @return string of result
   * @throws TaskException
   */
  public String getTaskResultData() throws TaskException {
    BufferedReader taskDataResultFile = null;
    String taskResultDataLocation;
    TaskType type = getOperationFromFile();
    if (type.equals(TaskType.BUILD)) {
      taskResultDataLocation = ConfigManager.getTaskLogsFileLocationByID(taskID);
    } else {
      taskResultDataLocation = ConfigManager.getTaskRunResultFileLocationByID(taskID);
    }

    StringBuilder taskDataResult = new StringBuilder("");
    try {
      taskDataResultFile = new BufferedReader(new FileReader(taskResultDataLocation));
      String str;
      while ((str = taskDataResultFile.readLine()) != null) {
        taskDataResult.append(str + '\n');
      }
      taskDataResultFile.close();

    } catch (FileNotFoundException e) {
      throw new TaskException("Task result file can not be found.");

    } catch (IOException e) {
      throw new TaskException("Task result file can not be read.");
    }

    return taskDataResult.toString();
  }

  //saving task to data base

  public void save() throws TaskException{
    setTaskStatusToFile();
    setTaskInputDataToFile();
  }
}


